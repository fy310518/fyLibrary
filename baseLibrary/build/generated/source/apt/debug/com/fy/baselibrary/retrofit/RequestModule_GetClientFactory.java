// Generated by dagger.internal.codegen.ComponentProcessor (https://google.github.io/dagger).
package com.fy.baselibrary.retrofit;

import dagger.internal.Factory;
import dagger.internal.Preconditions;
import javax.inject.Provider;
import okhttp3.OkHttpClient;
import okhttp3.logging.HttpLoggingInterceptor;

public final class RequestModule_GetClientFactory implements Factory<OkHttpClient.Builder> {
  private final RequestModule module;

  private final Provider<HttpLoggingInterceptor> logInterceptorProvider;

  public RequestModule_GetClientFactory(
      RequestModule module, Provider<HttpLoggingInterceptor> logInterceptorProvider) {
    assert module != null;
    this.module = module;
    assert logInterceptorProvider != null;
    this.logInterceptorProvider = logInterceptorProvider;
  }

  @Override
  public OkHttpClient.Builder get() {
    return Preconditions.checkNotNull(
        module.getClient(logInterceptorProvider.get()),
        "Cannot return null from a non-@Nullable @Provides method");
  }

  public static Factory<OkHttpClient.Builder> create(
      RequestModule module, Provider<HttpLoggingInterceptor> logInterceptorProvider) {
    return new RequestModule_GetClientFactory(module, logInterceptorProvider);
  }

  /** Proxies {@link RequestModule#getClient(HttpLoggingInterceptor)}. */
  public static OkHttpClient.Builder proxyGetClient(
      RequestModule instance, HttpLoggingInterceptor logInterceptor) {
    return instance.getClient(logInterceptor);
  }
}
